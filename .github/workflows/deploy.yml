name: CI/CD Pipeline - Deploy to AWS EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_NAME: churn-prediction
  TAG: abdelhamid590  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: pytest tests/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker repository
        run: |
          sudo rm -f /etc/apt/sources.list.d/docker.list
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
          https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.TAG }} .

      - name: Tag and Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $IMAGE_NAME:${{ env.TAG }} $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
          docker push $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
          echo "ECR_IMAGE=$ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}" >> $GITHUB_ENV

     # remove from here to down if localhost
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          printf '%s' '${{ secrets.EC2_SSH_KEY }}' > ec2_key.pem
          chmod 400 ec2_key.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            # Clean up any existing Docker repository files
            sudo rm -f /etc/apt/sources.list.d/docker.list
            sudo rm -f /etc/apt/keyrings/docker.gpg

            # Remove any previous Docker installation
            sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
            
            # Update package index
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates curl gnupg lsb-release git

            # Create directory for keyrings
            sudo mkdir -p /etc/apt/keyrings

            # Add Docker GPG key
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
              gpg --dearmor --batch --yes --no-tty | \
              sudo tee /etc/apt/keyrings/docker.gpg > /dev/null

            # Set proper permissions for GPG key
            sudo chmod a+r /etc/apt/keyrings/docker.gpg

            # Add Docker's official APT repository (fixed formatting)
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            # Update package index again
            sudo apt-get update -y
            
            # Install Docker
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

            # Enable and start Docker service
            sudo systemctl enable --now docker
            
            # Add current user to docker group
            sudo usermod -aG docker $USER

            # Install AWS CLI if not present
            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            fi

            # Clone or pull repo
            REPO_NAME=$(basename "${{ github.repository }}")
            mkdir -p ~/abdelhamid
            cd ~/abdelhamid

            if [ ! -d "$REPO_NAME/.git" ]; then
              git clone https://github.com/${{ github.repository }} "$REPO_NAME"
            fi

            cd "$REPO_NAME"
            git pull

            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Debug: Check current docker-compose.yml content
            echo "=== Current docker-compose.yml content ==="
            cat docker-compose.yml
            echo "=== End of current content ==="
            
            # Create a backup of the original file
            cp docker-compose.yml docker-compose.yml.backup
            
            # Update only the main application service image using more precise sed commands
            echo "Attempting to update main service image..."
            
            # Try different common service names and update only that specific service
            if grep -q "^[[:space:]]*fastapi:" docker-compose.yml; then
                echo "Found fastapi service, updating its image..."
                sed -i '/^[[:space:]]*fastapi:/,/^[[:space:]]*[^[:space:]]/ {
                    /^[[:space:]]*image:/ s|image:.*|image: "'$ECR_IMAGE'"|
                }' docker-compose.yml
            elif grep -q "^[[:space:]]*app:" docker-compose.yml; then
                echo "Found app service, updating its image..."
                sed -i '/^[[:space:]]*app:/,/^[[:space:]]*[^[:space:]]/ {
                    /^[[:space:]]*image:/ s|image:.*|image: "'$ECR_IMAGE'"|
                }' docker-compose.yml
            elif grep -q "^[[:space:]]*web:" docker-compose.yml; then
                echo "Found web service, updating its image..."
                sed -i '/^[[:space:]]*web:/,/^[[:space:]]*[^[:space:]]/ {
                    /^[[:space:]]*image:/ s|image:.*|image: "'$ECR_IMAGE'"|
                }' docker-compose.yml
            elif grep -q "^[[:space:]]*api:" docker-compose.yml; then
                echo "Found api service, updating its image..."
                sed -i '/^[[:space:]]*api:/,/^[[:space:]]*[^[:space:]]/ {
                    /^[[:space:]]*image:/ s|image:.*|image: "'$ECR_IMAGE'"|
                }' docker-compose.yml
            elif grep -q "^[[:space:]]*churn-prediction:" docker-compose.yml; then
                echo "Found churn-prediction service, updating its image..."
                sed -i '/^[[:space:]]*churn-prediction:/,/^[[:space:]]*[^[:space:]]/ {
                    /^[[:space:]]*image:/ s|image:.*|image: "'$ECR_IMAGE'"|
                }' docker-compose.yml
            else
                echo "No recognized main service found, updating first service with image..."
                # Find the first service that has an image and update only that one
                first_service=$(grep -E "^[[:space:]]*[a-zA-Z0-9_-]+:" docker-compose.yml | head -1 | sed 's/[[:space:]]*\([^:]*\):.*/\1/')
                if [ ! -z "$first_service" ]; then
                    echo "Updating first service: $first_service"
                    sed -i "/^[[:space:]]*$first_service:/,/^[[:space:]]*[^[:space:]]/ {
                        /^[[:space:]]*image:/ s|image:.*|image: \"$ECR_IMAGE\"|
                    }" docker-compose.yml
                fi
            fi
            
            echo "=== Updated docker-compose.yml content ==="
            cat docker-compose.yml
            echo "=== End of updated content ==="
            
            # Validate the docker-compose.yml syntax
            echo "Validating docker-compose.yml..."
            if ! docker compose config >/dev/null 2>&1; then
                echo "Docker-compose.yml validation failed, restoring backup..."
                cp docker-compose.yml.backup docker-compose.yml
                echo "Restored original docker-compose.yml"
                echo "ERROR: Please check your docker-compose.yml structure manually"
                exit 1
            else
                echo "docker-compose.yml validation successful!"
            fi

            # Deploy with Docker Compose
            docker compose down --remove-orphans || true
            docker compose pull
            docker compose up -d
          EOF