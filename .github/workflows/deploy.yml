name: CI/CD Pipeline - Deploy to AWS EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  IMAGE_NAME: churn-prediction
  TAG: abdelhamid590  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: pytest tests/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.TAG }} .

      - name: Tag and Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $IMAGE_NAME:${{ env.TAG }} $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
          docker push $ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}
          echo "ECR_IMAGE=$ECR_REGISTRY/$IMAGE_NAME:${{ env.TAG }}" >> $GITHUB_ENV

     # remove from here to down if localhost
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          printf '%s' '${{ secrets.EC2_SSH_KEY }}' > ec2_key.pem
          chmod 400 ec2_key.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -eo pipefail

            ############### 1. Install / upgrade Docker ################
            sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
            sudo apt-get update -y
            sudo apt-get install -y ca-certificates curl gnupg lsb-release git

            # Add Dockerâ€™s GPG key (no /dev/tty prompt)
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
              gpg --dearmor --batch --yes --no-tty | \
              sudo tee /etc/apt/keyrings/docker.gpg >/dev/null

            # Add Docker APT repo
            echo \
              "deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
              https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list >/dev/null

            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

            # Start & enable Docker, allow current user to use it
            sudo systemctl enable --now docker
            sudo usermod -aG docker \$USER || true

            ############### 2. Clone / update repo #####################
            REPO_NAME=\$(basename "${{ github.repository }}")
            mkdir -p ~/abdelhamid
            cd ~/abdelhamid

            if [ ! -d "\$REPO_NAME/.git" ]; then
              git clone https://github.com/${{ github.repository }}.git "\$REPO_NAME"
            fi
            cd "\$REPO_NAME"
            git pull --ff-only

            ############### 3. Login to ECR ############################
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
              docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # Swap image tag in compose file
            sed -i "s|image:.*|image: $ECR_IMAGE|" docker-compose.yml

            ############### 4. Deploy with Compose #####################
            docker compose down --remove-orphans || true
            docker compose pull
            docker compose up -d
      EOF
